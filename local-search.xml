<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>pandas的常用方法</title>
    <link href="/2025/02/20/pandas%E7%9A%84%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    <url>/2025/02/20/pandas%E7%9A%84%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="Pandas-的常用方法"><a href="#Pandas-的常用方法" class="headerlink" title="Pandas 的常用方法"></a>Pandas 的常用方法</h1><h2 id="1-导入-Pandas"><a href="#1-导入-Pandas" class="headerlink" title="1. 导入 Pandas"></a>1. 导入 Pandas</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br></code></pre></td></tr></table></figure><h2 id="2-创建-DataFrame-和-Series"><a href="#2-创建-DataFrame-和-Series" class="headerlink" title="2. 创建 DataFrame 和 Series"></a>2. 创建 DataFrame 和 Series</h2><ul><li><strong>从字典创建 DataFrame</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">data = &#123;<br>    <span class="hljs-string">&#x27;name&#x27;</span>: [<span class="hljs-string">&#x27;Tom&#x27;</span>, <span class="hljs-string">&#x27;Jerry&#x27;</span>, <span class="hljs-string">&#x27;Mickey&#x27;</span>],<br>    <span class="hljs-string">&#x27;age&#x27;</span>: [<span class="hljs-number">20</span>, <span class="hljs-number">21</span>, <span class="hljs-number">19</span>]<br>&#125;<br>df = pd.DataFrame(data)<br><span class="hljs-built_in">print</span>(df)<br></code></pre></td></tr></table></figure><ul><li><strong>从列表创建 DataFrame</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">data = [[<span class="hljs-string">&#x27;Tom&#x27;</span>, <span class="hljs-number">20</span>], [<span class="hljs-string">&#x27;Jerry&#x27;</span>, <span class="hljs-number">21</span>], [<span class="hljs-string">&#x27;Mickey&#x27;</span>, <span class="hljs-number">19</span>]]<br>df = pd.DataFrame(data, columns=[<span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span>])<br><span class="hljs-built_in">print</span>(df)<br></code></pre></td></tr></table></figure><ul><li><strong>创建 Series</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">s = pd.Series([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>])<br><span class="hljs-built_in">print</span>(s)<br></code></pre></td></tr></table></figure><h2 id="3-查看数据"><a href="#3-查看数据" class="headerlink" title="3. 查看数据"></a>3. 查看数据</h2><ul><li><strong>查看 DataFrame 的前几行</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">df.head()  <span class="hljs-comment"># 默认前5行</span><br>df.head(<span class="hljs-number">10</span>)  <span class="hljs-comment"># 查看前10行</span><br></code></pre></td></tr></table></figure><ul><li><strong>查看 DataFrame 的后几行</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">df.tail()  <span class="hljs-comment"># 默认后5行</span><br>df.tail(<span class="hljs-number">3</span>)  <span class="hljs-comment"># 查看后3行</span><br></code></pre></td></tr></table></figure><ul><li><strong>查看 DataFrame 的信息</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">df.info()  <span class="hljs-comment"># 查看 DataFrame 的数据类型和非空值数量</span><br></code></pre></td></tr></table></figure><ul><li><strong>查看 DataFrame 的描述性统计</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">df.describe()  <span class="hljs-comment"># 查看数值型列的统计信息</span><br></code></pre></td></tr></table></figure><h2 id="4-选择数据"><a href="#4-选择数据" class="headerlink" title="4. 选择数据"></a>4. 选择数据</h2><ul><li><strong>按列选择数据</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">df[<span class="hljs-string">&#x27;name&#x27;</span>]  <span class="hljs-comment"># 选择 &#x27;name&#x27; 列</span><br></code></pre></td></tr></table></figure><ul><li><strong>按行选择数据</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">df.iloc[<span class="hljs-number">0</span>]  <span class="hljs-comment"># 选择第一行（通过索引位置）</span><br>df.loc[<span class="hljs-number">0</span>]   <span class="hljs-comment"># 选择第一行（通过行标签）</span><br></code></pre></td></tr></table></figure><ul><li><strong>按条件筛选数据</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">df[df[<span class="hljs-string">&#x27;age&#x27;</span>] &gt; <span class="hljs-number">20</span>]  <span class="hljs-comment"># 筛选年龄大于20的人</span><br></code></pre></td></tr></table></figure><h2 id="5-数据处理"><a href="#5-数据处理" class="headerlink" title="5. 数据处理"></a>5. 数据处理</h2><ul><li><strong>添加新列</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">df[<span class="hljs-string">&#x27;gender&#x27;</span>] = [<span class="hljs-string">&#x27;M&#x27;</span>, <span class="hljs-string">&#x27;M&#x27;</span>, <span class="hljs-string">&#x27;M&#x27;</span>]  <span class="hljs-comment"># 添加性别列</span><br><span class="hljs-built_in">print</span>(df)<br></code></pre></td></tr></table></figure><ul><li><strong>修改现有列</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">df[<span class="hljs-string">&#x27;age&#x27;</span>] = df[<span class="hljs-string">&#x27;age&#x27;</span>] + <span class="hljs-number">1</span>  <span class="hljs-comment"># 年龄加1</span><br><span class="hljs-built_in">print</span>(df)<br></code></pre></td></tr></table></figure><ul><li><strong>删除列</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">df.drop(<span class="hljs-string">&#x27;gender&#x27;</span>, axis=<span class="hljs-number">1</span>, inplace=<span class="hljs-literal">True</span>)  <span class="hljs-comment"># 删除 &#x27;gender&#x27; 列</span><br><span class="hljs-built_in">print</span>(df)<br></code></pre></td></tr></table></figure><ul><li><strong>缺失值处理</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">df.isnull()  <span class="hljs-comment"># 查看缺失值</span><br>df.dropna()  <span class="hljs-comment"># 删除含有缺失值的行</span><br>df.fillna(<span class="hljs-number">0</span>)  <span class="hljs-comment"># 填充缺失值为0</span><br></code></pre></td></tr></table></figure><h2 id="6-排序"><a href="#6-排序" class="headerlink" title="6. 排序"></a>6. 排序</h2><ul><li><strong>按列排序</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">df.sort_values(by=<span class="hljs-string">&#x27;age&#x27;</span>, ascending=<span class="hljs-literal">False</span>)  <span class="hljs-comment"># 按照年龄降序排序</span><br></code></pre></td></tr></table></figure><ul><li><strong>按索引排序</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">df.sort_index(ascending=<span class="hljs-literal">False</span>)  <span class="hljs-comment"># 按照行索引降序排序</span><br></code></pre></td></tr></table></figure><h2 id="7-合并和连接"><a href="#7-合并和连接" class="headerlink" title="7. 合并和连接"></a>7. 合并和连接</h2><ul><li><strong>合并 DataFrame</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">df1 = pd.DataFrame(&#123;<span class="hljs-string">&#x27;A&#x27;</span>: [<span class="hljs-string">&#x27;A0&#x27;</span>, <span class="hljs-string">&#x27;A1&#x27;</span>, <span class="hljs-string">&#x27;A2&#x27;</span>], <span class="hljs-string">&#x27;B&#x27;</span>: [<span class="hljs-string">&#x27;B0&#x27;</span>, <span class="hljs-string">&#x27;B1&#x27;</span>, <span class="hljs-string">&#x27;B2&#x27;</span>]&#125;)<br>df2 = pd.DataFrame(&#123;<span class="hljs-string">&#x27;A&#x27;</span>: [<span class="hljs-string">&#x27;A3&#x27;</span>, <span class="hljs-string">&#x27;A4&#x27;</span>, <span class="hljs-string">&#x27;A5&#x27;</span>], <span class="hljs-string">&#x27;B&#x27;</span>: [<span class="hljs-string">&#x27;B3&#x27;</span>, <span class="hljs-string">&#x27;B4&#x27;</span>, <span class="hljs-string">&#x27;B5&#x27;</span>]&#125;)<br>result = pd.concat([df1, df2], ignore_index=<span class="hljs-literal">True</span>)<br><span class="hljs-built_in">print</span>(result)<br></code></pre></td></tr></table></figure><ul><li><strong>连接 DataFrame</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">df1 = pd.DataFrame(&#123;<span class="hljs-string">&#x27;A&#x27;</span>: [<span class="hljs-string">&#x27;A0&#x27;</span>, <span class="hljs-string">&#x27;A1&#x27;</span>, <span class="hljs-string">&#x27;A2&#x27;</span>], <span class="hljs-string">&#x27;B&#x27;</span>: [<span class="hljs-string">&#x27;B0&#x27;</span>, <span class="hljs-string">&#x27;B1&#x27;</span>, <span class="hljs-string">&#x27;B2&#x27;</span>]&#125;)<br>df2 = pd.DataFrame(&#123;<span class="hljs-string">&#x27;C&#x27;</span>: [<span class="hljs-string">&#x27;C0&#x27;</span>, <span class="hljs-string">&#x27;C1&#x27;</span>, <span class="hljs-string">&#x27;C2&#x27;</span>], <span class="hljs-string">&#x27;D&#x27;</span>: [<span class="hljs-string">&#x27;D0&#x27;</span>, <span class="hljs-string">&#x27;D1&#x27;</span>, <span class="hljs-string">&#x27;D2&#x27;</span>]&#125;)<br>result = pd.concat([df1, df2], axis=<span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(result)<br></code></pre></td></tr></table></figure><h2 id="8-分组操作"><a href="#8-分组操作" class="headerlink" title="8. 分组操作"></a>8. 分组操作</h2><ul><li><strong>分组并计算平均值</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">df = pd.DataFrame(&#123;<span class="hljs-string">&#x27;A&#x27;</span>: [<span class="hljs-string">&#x27;A0&#x27;</span>, <span class="hljs-string">&#x27;A1&#x27;</span>, <span class="hljs-string">&#x27;A2&#x27;</span>, <span class="hljs-string">&#x27;A3&#x27;</span>], <span class="hljs-string">&#x27;B&#x27;</span>: [<span class="hljs-string">&#x27;B0&#x27;</span>, <span class="hljs-string">&#x27;B1&#x27;</span>, <span class="hljs-string">&#x27;B2&#x27;</span>, <span class="hljs-string">&#x27;B3&#x27;</span>], <span class="hljs-string">&#x27;C&#x27;</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]&#125;)<br>grouped = df.groupby(<span class="hljs-string">&#x27;A&#x27;</span>).mean()<br><span class="hljs-built_in">print</span>(grouped)<br></code></pre></td></tr></table></figure><h2 id="9-数据透视表"><a href="#9-数据透视表" class="headerlink" title="9. 数据透视表"></a>9. 数据透视表</h2><ul><li><strong>创建数据透视表</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">df = pd.DataFrame(&#123;<span class="hljs-string">&#x27;A&#x27;</span>: [<span class="hljs-string">&#x27;A0&#x27;</span>, <span class="hljs-string">&#x27;A1&#x27;</span>, <span class="hljs-string">&#x27;A2&#x27;</span>, <span class="hljs-string">&#x27;A3&#x27;</span>], <span class="hljs-string">&#x27;B&#x27;</span>: [<span class="hljs-string">&#x27;B0&#x27;</span>, <span class="hljs-string">&#x27;B1&#x27;</span>, <span class="hljs-string">&#x27;B2&#x27;</span>, <span class="hljs-string">&#x27;B3&#x27;</span>], <span class="hljs-string">&#x27;C&#x27;</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]&#125;)<br>pivot_table = pd.pivot_table(df, values=<span class="hljs-string">&#x27;C&#x27;</span>, index=[<span class="hljs-string">&#x27;A&#x27;</span>], columns=[<span class="hljs-string">&#x27;B&#x27;</span>], aggfunc=<span class="hljs-string">&#x27;sum&#x27;</span>)<br><span class="hljs-built_in">print</span>(pivot_table)<br></code></pre></td></tr></table></figure><h2 id="10-时间日期处理"><a href="#10-时间日期处理" class="headerlink" title="10. 时间日期处理"></a>10. 时间日期处理</h2><ul><li><strong>转换为日期类型</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">df[<span class="hljs-string">&#x27;date&#x27;</span>] = pd.to_datetime(df[<span class="hljs-string">&#x27;date&#x27;</span>])<br></code></pre></td></tr></table></figure><ul><li><strong>提取日期的年份、月份、日期</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">df[<span class="hljs-string">&#x27;year&#x27;</span>] = df[<span class="hljs-string">&#x27;date&#x27;</span>].dt.year<br>df[<span class="hljs-string">&#x27;month&#x27;</span>] = df[<span class="hljs-string">&#x27;date&#x27;</span>].dt.month<br>df[<span class="hljs-string">&#x27;day&#x27;</span>] = df[<span class="hljs-string">&#x27;date&#x27;</span>].dt.day<br></code></pre></td></tr></table></figure><h2 id="11-导出数据"><a href="#11-导出数据" class="headerlink" title="11. 导出数据"></a>11. 导出数据</h2><ul><li><strong>导出 DataFrame 到 CSV</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">df.to_csv(<span class="hljs-string">&#x27;data.csv&#x27;</span>, index=<span class="hljs-literal">False</span>)<br></code></pre></td></tr></table></figure><ul><li><strong>导出 DataFrame 到 Excel</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">df.to_excel(<span class="hljs-string">&#x27;data.xlsx&#x27;</span>, index=<span class="hljs-literal">False</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>pandas</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pands</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vim常用命令</title>
    <link href="/2025/02/19/vim%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <url>/2025/02/19/vim%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h1 id="Vim-常用命令指南"><a href="#Vim-常用命令指南" class="headerlink" title="Vim 常用命令指南"></a>Vim 常用命令指南</h1><h2 id="模式切换"><a href="#模式切换" class="headerlink" title="模式切换"></a>模式切换</h2><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td><code>i</code></td><td>进入插入模式（当前光标前）</td></tr><tr><td><code>a</code></td><td>进入插入模式（当前光标后）</td></tr><tr><td><code>o</code></td><td>在当前行下方新建插入行</td></tr><tr><td><code>O</code></td><td>在当前行上方新建插入行</td></tr><tr><td><code>v</code></td><td>进入可视模式（字符选择）</td></tr><tr><td><code>V</code></td><td>进入可视模式（行选择）</td></tr><tr><td><code>Esc</code></td><td>返回普通模式</td></tr></tbody></table><h2 id="光标移动"><a href="#光标移动" class="headerlink" title="光标移动"></a>光标移动</h2><h3 id="基础移动"><a href="#基础移动" class="headerlink" title="基础移动"></a>基础移动</h3><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td><code>h</code></td><td>左移</td></tr><tr><td><code>j</code></td><td>下移</td></tr><tr><td><code>k</code></td><td>上移</td></tr><tr><td><code>l</code></td><td>右移</td></tr><tr><td><code>w</code></td><td>跳到下一个单词开头</td></tr><tr><td><code>b</code></td><td>跳到上一个单词开头</td></tr></tbody></table><h3 id="快速跳转"><a href="#快速跳转" class="headerlink" title="快速跳转"></a>快速跳转</h3><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td><code>gg</code></td><td>跳转到文件开头</td></tr><tr><td><code>G</code></td><td>跳转到文件末尾</td></tr><tr><td><code>:n</code></td><td>跳转到第n行（n为数字）</td></tr><tr><td><code>0</code></td><td>跳转到行首</td></tr><tr><td><code>$</code></td><td>跳转到行尾</td></tr><tr><td><code>Ctrl+f</code></td><td>向下翻页</td></tr><tr><td><code>Ctrl+b</code></td><td>向上翻页</td></tr></tbody></table><h2 id="文本编辑"><a href="#文本编辑" class="headerlink" title="文本编辑"></a>文本编辑</h2><h3 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h3><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td><code>x</code></td><td>删除当前字符</td></tr><tr><td><code>dw</code></td><td>删除到单词末尾</td></tr><tr><td><code>dd</code></td><td>删除整行</td></tr><tr><td><code>D</code></td><td>删除到行尾</td></tr></tbody></table><h3 id="复制粘贴"><a href="#复制粘贴" class="headerlink" title="复制粘贴"></a>复制粘贴</h3><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td><code>yy</code></td><td>复制当前行</td></tr><tr><td><code>p</code></td><td>粘贴到光标后</td></tr><tr><td><code>P</code></td><td>粘贴到光标前</td></tr><tr><td><code>yiw</code></td><td>复制当前单词</td></tr></tbody></table><h3 id="撤销-重做"><a href="#撤销-重做" class="headerlink" title="撤销&#x2F;重做"></a>撤销&#x2F;重做</h3><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td><code>u</code></td><td>撤销操作</td></tr><tr><td><code>Ctrl+r</code></td><td>重做操作</td></tr></tbody></table><h2 id="搜索替换"><a href="#搜索替换" class="headerlink" title="搜索替换"></a>搜索替换</h2><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td><code>/keyword</code></td><td>向下搜索关键字</td></tr><tr><td><code>?keyword</code></td><td>向上搜索关键字</td></tr><tr><td><code>n</code></td><td>跳转到下一个匹配项</td></tr><tr><td><code>N</code></td><td>跳转到上一个匹配项</td></tr><tr><td><code>:%s/old/new/g</code></td><td>全局替换（加<code>c</code>确认每个替换）</td></tr></tbody></table><h2 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h2><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td><code>:w</code></td><td>保存文件</td></tr><tr><td><code>:q</code></td><td>退出</td></tr><tr><td><code>:wq</code> &#x2F; <code>:x</code></td><td>保存并退出</td></tr><tr><td><code>:q!</code></td><td>强制退出不保存</td></tr><tr><td><code>:e filename</code></td><td>打开新文件</td></tr><tr><td><code>:saveas filename</code></td><td>另存为</td></tr></tbody></table><h2 id="分屏操作"><a href="#分屏操作" class="headerlink" title="分屏操作"></a>分屏操作</h2><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td><code>:sp</code> &#x2F; <code>:split</code></td><td>水平分屏</td></tr><tr><td><code>:vsp</code></td><td>垂直分屏</td></tr><tr><td><code>Ctrl+w hjkl</code></td><td>切换分屏窗口</td></tr><tr><td><code>Ctrl+w c</code></td><td>关闭当前分屏</td></tr><tr><td><code>Ctrl+w o</code></td><td>关闭其他分屏</td></tr></tbody></table><h2 id="其他实用技巧"><a href="#其他实用技巧" class="headerlink" title="其他实用技巧"></a>其他实用技巧</h2><ol><li>显示行号：<code>:set number</code>（取消用<code>:set nonumber</code>）</li><li>批量缩进：可视模式选中文本后按<code>&gt;</code>或<code>&lt;</code></li><li>重复命令：<code>数字 + 命令</code>（如<code>3dd</code>删除3行）</li><li>执行外部命令：<code>:!command</code>（如<code>:!ls</code>）</li></ol><blockquote><p>提示：Vim 的强大之处在于命令组合，例如 <code>d2w</code> &#x3D; 删除2个单词，<code>ci&quot;</code> &#x3D; 修改引号内的内容</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vim</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>linux常用命令</title>
    <link href="/2025/02/19/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <url>/2025/02/19/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h1 id="Linux-常用命令"><a href="#Linux-常用命令" class="headerlink" title="Linux 常用命令"></a>Linux 常用命令</h1><h2 id="1-系统信息"><a href="#1-系统信息" class="headerlink" title="1. 系统信息"></a>1. 系统信息</h2><ul><li><p><strong>查看系统信息</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">uname</span> -a<br></code></pre></td></tr></table></figure></li><li><p><strong>查看操作系统类型</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">uname</span> -s<br></code></pre></td></tr></table></figure></li><li><p><strong>查看 Linux 版本</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">lsb_release -a<br></code></pre></td></tr></table></figure></li><li><p><strong>查看内存使用情况</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">free -h<br></code></pre></td></tr></table></figure></li><li><p><strong>查看磁盘使用情况</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">df</span> -h<br></code></pre></td></tr></table></figure></li><li><p><strong>查看硬盘 I&#x2F;O 性能</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">iostat<br></code></pre></td></tr></table></figure></li><li><p><strong>查看 CPU 使用情况</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">top<br></code></pre></td></tr></table></figure></li></ul><h2 id="2-文件与目录操作"><a href="#2-文件与目录操作" class="headerlink" title="2. 文件与目录操作"></a>2. 文件与目录操作</h2><ul><li><p><strong>列出目录内容</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ls</span><br></code></pre></td></tr></table></figure></li><li><p><strong>查看文件内容</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> &lt;file_name&gt;<br></code></pre></td></tr></table></figure></li><li><p><strong>查看文件内容（分页显示）</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">less &lt;file_name&gt;<br></code></pre></td></tr></table></figure></li><li><p><strong>查看文件内容（逐屏显示）</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">more &lt;file_name&gt;<br></code></pre></td></tr></table></figure></li><li><p><strong>复制文件</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cp</span> &lt;<span class="hljs-built_in">source</span>&gt; &lt;destination&gt;<br></code></pre></td></tr></table></figure></li><li><p><strong>移动或重命名文件</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mv</span> &lt;<span class="hljs-built_in">source</span>&gt; &lt;destination&gt;<br></code></pre></td></tr></table></figure></li><li><p><strong>删除文件</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">rm</span> &lt;file_name&gt;<br></code></pre></td></tr></table></figure></li><li><p><strong>删除目录及其内容</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">rm</span> -r &lt;directory_name&gt;<br></code></pre></td></tr></table></figure></li><li><p><strong>创建新目录</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> &lt;directory_name&gt;<br></code></pre></td></tr></table></figure></li><li><p><strong>删除空目录</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">rmdir</span> &lt;directory_name&gt;<br></code></pre></td></tr></table></figure></li></ul><h2 id="3-用户管理"><a href="#3-用户管理" class="headerlink" title="3. 用户管理"></a>3. 用户管理</h2><ul><li><p><strong>查看当前用户</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">whoami</span><br></code></pre></td></tr></table></figure></li><li><p><strong>查看系统中所有用户</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> /etc/passwd<br></code></pre></td></tr></table></figure></li><li><p><strong>切换用户</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">su &lt;username&gt;<br></code></pre></td></tr></table></figure></li><li><p><strong>创建新用户</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> useradd &lt;username&gt;<br></code></pre></td></tr></table></figure></li><li><p><strong>删除用户</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> userdel &lt;username&gt;<br></code></pre></td></tr></table></figure></li><li><p><strong>修改用户密码</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> passwd &lt;username&gt;<br></code></pre></td></tr></table></figure></li></ul><h2 id="4-文件权限与权限管理"><a href="#4-文件权限与权限管理" class="headerlink" title="4. 文件权限与权限管理"></a>4. 文件权限与权限管理</h2><ul><li><p><strong>查看文件权限</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ls</span> -l &lt;file_name&gt;<br></code></pre></td></tr></table></figure></li><li><p><strong>修改文件权限</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> &lt;permissions&gt; &lt;file_name&gt;<br></code></pre></td></tr></table></figure></li><li><p><strong>修改文件拥有者</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chown</span> &lt;user&gt;:&lt;group&gt; &lt;file_name&gt;<br></code></pre></td></tr></table></figure></li></ul><h2 id="5-网络管理"><a href="#5-网络管理" class="headerlink" title="5. 网络管理"></a>5. 网络管理</h2><ul><li><p><strong>查看网络接口配置</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ifconfig<br></code></pre></td></tr></table></figure></li><li><p><strong>查看网络连接</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">netstat -tuln<br></code></pre></td></tr></table></figure></li><li><p><strong>查看端口占用情况</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">lsof -i:&lt;port_number&gt;<br></code></pre></td></tr></table></figure></li><li><p><strong>ping 命令</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ping &lt;host_or_ip&gt;<br></code></pre></td></tr></table></figure></li><li><p><strong>使用 curl 获取网页内容</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl &lt;url&gt;<br></code></pre></td></tr></table></figure></li></ul><h2 id="6-进程管理"><a href="#6-进程管理" class="headerlink" title="6. 进程管理"></a>6. 进程管理</h2><ul><li><p><strong>查看当前运行的进程</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ps aux<br></code></pre></td></tr></table></figure></li><li><p><strong>杀死进程</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">kill</span> &lt;pid&gt;<br></code></pre></td></tr></table></figure></li><li><p><strong>强制杀死进程</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">kill</span> -9 &lt;pid&gt;<br></code></pre></td></tr></table></figure></li><li><p><strong>查看进程树</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pstree<br></code></pre></td></tr></table></figure></li></ul><h2 id="7-包管理（基于-Debian-系列）"><a href="#7-包管理（基于-Debian-系列）" class="headerlink" title="7. 包管理（基于 Debian 系列）"></a>7. 包管理（基于 Debian 系列）</h2><ul><li><p><strong>更新包索引</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt update<br></code></pre></td></tr></table></figure></li><li><p><strong>安装软件包</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt install &lt;package_name&gt;<br></code></pre></td></tr></table></figure></li><li><p><strong>删除软件包</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt remove &lt;package_name&gt;<br></code></pre></td></tr></table></figure></li><li><p><strong>查看已安装的软件包</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">dpkg -l<br></code></pre></td></tr></table></figure></li><li><p><strong>升级软件包</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt upgrade<br></code></pre></td></tr></table></figure></li></ul><h2 id="8-压缩与解压"><a href="#8-压缩与解压" class="headerlink" title="8. 压缩与解压"></a>8. 压缩与解压</h2><ul><li><p><strong>解压 <code>.tar.gz</code> 文件</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">tar -zxvf &lt;file_name.tar.gz&gt;<br></code></pre></td></tr></table></figure></li><li><p><strong>解压 <code>.zip</code> 文件</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">unzip &lt;file_name.zip&gt;<br></code></pre></td></tr></table></figure></li><li><p><strong>创建 <code>.tar.gz</code> 文件</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">tar -zcvf &lt;archive_name.tar.gz&gt; &lt;directory_or_files&gt;<br></code></pre></td></tr></table></figure></li></ul><h2 id="9-查找文件"><a href="#9-查找文件" class="headerlink" title="9. 查找文件"></a>9. 查找文件</h2><ul><li><p><strong>查找文件</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">find /path/to/search -name &lt;file_name&gt;<br></code></pre></td></tr></table></figure></li><li><p><strong>查找文件内容</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">grep <span class="hljs-string">&quot;&lt;search_string&gt;&quot;</span> &lt;file_name&gt;<br></code></pre></td></tr></table></figure></li></ul><h2 id="10-日志查看"><a href="#10-日志查看" class="headerlink" title="10. 日志查看"></a>10. 日志查看</h2><ul><li><p><strong>查看系统日志</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">tail</span> -f /var/log/syslog<br></code></pre></td></tr></table></figure></li><li><p><strong>查看特定日志文件</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">tail</span> -f /var/log/auth.log<br></code></pre></td></tr></table></figure></li></ul><h2 id="11-系统更新与重启"><a href="#11-系统更新与重启" class="headerlink" title="11. 系统更新与重启"></a>11. 系统更新与重启</h2><ul><li><p><strong>更新系统</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt update &amp;&amp; <span class="hljs-built_in">sudo</span> apt upgrade<br></code></pre></td></tr></table></figure></li><li><p><strong>重启系统</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> reboot<br></code></pre></td></tr></table></figure></li><li><p><strong>关机</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> shutdown -h now<br></code></pre></td></tr></table></figure></li></ul><h2 id="12-其他常用命令"><a href="#12-其他常用命令" class="headerlink" title="12. 其他常用命令"></a>12. 其他常用命令</h2><ul><li><p><strong>查看磁盘使用情况</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">du</span> -sh &lt;directory_name&gt;<br></code></pre></td></tr></table></figure></li><li><p><strong>查看当前时间</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">date</span><br></code></pre></td></tr></table></figure></li><li><p><strong>显示命令历史记录</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">history</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="13-参考文档"><a href="#13-参考文档" class="headerlink" title="13. 参考文档"></a>13. 参考文档</h2><ul><li><a href="https://www.runoob.com/linux/linux-command-manual.html">Linux 命令大全</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo常用命令</title>
    <link href="/2025/02/19/hexo%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <url>/2025/02/19/hexo%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h1 id="Hexo-常用命令"><a href="#Hexo-常用命令" class="headerlink" title="Hexo 常用命令"></a>Hexo 常用命令</h1><h2 id="1-安装-Hexo"><a href="#1-安装-Hexo" class="headerlink" title="1. 安装 Hexo"></a>1. 安装 Hexo</h2><ul><li><p><strong>安装 Hexo</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-cli -g<br></code></pre></td></tr></table></figure></li><li><p><strong>初始化 Hexo 项目</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo init &lt;project_name&gt;<br><span class="hljs-built_in">cd</span> &lt;project_name&gt;<br>npm install<br></code></pre></td></tr></table></figure></li></ul><h2 id="2-启动和生成-Hexo-博客"><a href="#2-启动和生成-Hexo-博客" class="headerlink" title="2. 启动和生成 Hexo 博客"></a>2. 启动和生成 Hexo 博客</h2><h3 id="启动本地开发服务器"><a href="#启动本地开发服务器" class="headerlink" title="启动本地开发服务器"></a>启动本地开发服务器</h3><ul><li><strong>启动 Hexo 本地服务器</strong>：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo s<br></code></pre></td></tr></table></figure>这将启动一个本地开发服务器，通常默认访问地址为 <code>http://localhost:4000</code>。</li></ul><h3 id="生成和部署博客"><a href="#生成和部署博客" class="headerlink" title="生成和部署博客"></a>生成和部署博客</h3><ul><li><p><strong>清理已生成的文件</strong>（删除 <code>public</code> 文件夹内容）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo clean<br></code></pre></td></tr></table></figure></li><li><p><strong>生成静态文件</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo generate<br></code></pre></td></tr></table></figure></li><li><p><strong>部署到 GitHub 或其他平台</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo deploy<br></code></pre></td></tr></table></figure></li></ul><h2 id="3-博客内容管理"><a href="#3-博客内容管理" class="headerlink" title="3. 博客内容管理"></a>3. 博客内容管理</h2><h3 id="创建新文章"><a href="#创建新文章" class="headerlink" title="创建新文章"></a>创建新文章</h3><ul><li><strong>创建一篇新文章</strong>：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo new post <span class="hljs-string">&quot;文章标题&quot;</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="发布、草稿和查看文章"><a href="#发布、草稿和查看文章" class="headerlink" title="发布、草稿和查看文章"></a>发布、草稿和查看文章</h3><ul><li><p><strong>查看已创建的所有文章</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo list<br></code></pre></td></tr></table></figure></li><li><p><strong>查看草稿文章</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo list --draft<br></code></pre></td></tr></table></figure></li><li><p><strong>发布草稿文章</strong>：<br>在文章的 Front-matter 中将 <code>draft</code> 设置为 <code>false</code>，然后重新生成博客。</p></li></ul><h2 id="4-Hexo-配置文件"><a href="#4-Hexo-配置文件" class="headerlink" title="4. Hexo 配置文件"></a>4. Hexo 配置文件</h2><h3 id="修改-config-yml"><a href="#修改-config-yml" class="headerlink" title="修改 _config.yml"></a>修改 <code>_config.yml</code></h3><ul><li><strong>修改 Hexo 配置文件</strong>：编辑 Hexo 项目根目录下的 <code>_config.yml</code> 文件来配置博客基本信息，如站点标题、URL 等。</li></ul><h3 id="修改主题配置"><a href="#修改主题配置" class="headerlink" title="修改主题配置"></a>修改主题配置</h3><ul><li><strong>修改主题配置</strong>：编辑 <code>themes/&lt;your_theme&gt;/config.yml</code> 来调整主题样式、颜色和其他设置。</li></ul><h2 id="5-插件管理"><a href="#5-插件管理" class="headerlink" title="5. 插件管理"></a>5. 插件管理</h2><h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><ul><li><strong>安装 Hexo 插件</strong>：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install &lt;plugin_name&gt; --save<br></code></pre></td></tr></table></figure></li></ul><h3 id="启用插件"><a href="#启用插件" class="headerlink" title="启用插件"></a>启用插件</h3><ul><li><strong>启用插件</strong>：修改 <code>_config.yml</code> 文件，添加或启用需要的插件。</li></ul><h2 id="6-主题管理"><a href="#6-主题管理" class="headerlink" title="6. 主题管理"></a>6. 主题管理</h2><ul><li><p><strong>安装主题</strong>：将主题文件放入 <code>themes/</code> 目录。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> &lt;theme_url&gt; themes/&lt;theme_name&gt;<br></code></pre></td></tr></table></figure></li><li><p><strong>切换主题</strong>：修改 <code>_config.yml</code> 文件中的 <code>theme</code> 配置项，指定要使用的主题。</p></li></ul><h2 id="7-Hexo-清理和优化"><a href="#7-Hexo-清理和优化" class="headerlink" title="7. Hexo 清理和优化"></a>7. Hexo 清理和优化</h2><ul><li><p><strong>删除已生成的文件</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo clean<br></code></pre></td></tr></table></figure></li><li><p><strong>清理缓存</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo cache clean<br></code></pre></td></tr></table></figure></li></ul><h2 id="8-常用调试命令"><a href="#8-常用调试命令" class="headerlink" title="8. 常用调试命令"></a>8. 常用调试命令</h2><ul><li><p><strong>查看 Hexo 版本</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo -v<br></code></pre></td></tr></table></figure></li><li><p><strong>查看 Hexo 配置信息</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo config<br></code></pre></td></tr></table></figure></li><li><p><strong>调试 Hexo 配置</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo debug<br></code></pre></td></tr></table></figure></li></ul><h2 id="9-参考文档"><a href="#9-参考文档" class="headerlink" title="9. 参考文档"></a>9. 参考文档</h2><ul><li><a href="https://hexo.io/docs/">Hexo 官方文档</a></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>docker常用命令</title>
    <link href="/2025/02/19/docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <url>/2025/02/19/docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h1 id="Docker-常用命令"><a href="#Docker-常用命令" class="headerlink" title="Docker 常用命令"></a>Docker 常用命令</h1><h2 id="1-安装-Docker"><a href="#1-安装-Docker" class="headerlink" title="1. 安装 Docker"></a>1. 安装 Docker</h2><ul><li><strong>安装 Docker</strong>：<ul><li>参照 <a href="https://docs.docker.com/get-docker/">Docker 官方安装文档</a> 进行安装。</li></ul></li></ul><h2 id="2-Docker-容器管理"><a href="#2-Docker-容器管理" class="headerlink" title="2. Docker 容器管理"></a>2. Docker 容器管理</h2><h3 id="启动、停止、删除容器"><a href="#启动、停止、删除容器" class="headerlink" title="启动、停止、删除容器"></a>启动、停止、删除容器</h3><ul><li><p><strong>启动容器</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker start &lt;container_id_or_name&gt;<br></code></pre></td></tr></table></figure></li><li><p><strong>停止容器</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker stop &lt;container_id_or_name&gt;<br></code></pre></td></tr></table></figure></li><li><p><strong>重启容器</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker restart &lt;container_id_or_name&gt;<br></code></pre></td></tr></table></figure></li><li><p><strong>删除容器</strong>（删除已停止的容器）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker <span class="hljs-built_in">rm</span> &lt;container_id_or_name&gt;<br></code></pre></td></tr></table></figure></li><li><p><strong>查看所有容器（包括停止的容器）</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker ps -a<br></code></pre></td></tr></table></figure></li><li><p><strong>查看正在运行的容器</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker ps<br></code></pre></td></tr></table></figure></li></ul><h3 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h3><ul><li><p><strong>进入容器终端</strong>（交互模式）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker <span class="hljs-built_in">exec</span> -it &lt;container_id_or_name&gt; bash<br></code></pre></td></tr></table></figure></li><li><p><strong>退出容器</strong>（退出容器的终端）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">exit</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="3-Docker-镜像管理"><a href="#3-Docker-镜像管理" class="headerlink" title="3. Docker 镜像管理"></a>3. Docker 镜像管理</h2><h3 id="镜像操作"><a href="#镜像操作" class="headerlink" title="镜像操作"></a>镜像操作</h3><ul><li><p><strong>查看本地镜像</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker images<br></code></pre></td></tr></table></figure></li><li><p><strong>拉取镜像</strong>（从 Docker Hub 或自定义仓库拉取）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker pull &lt;image_name&gt;<br></code></pre></td></tr></table></figure></li><li><p><strong>删除镜像</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker rmi &lt;image_id_or_name&gt;<br></code></pre></td></tr></table></figure></li><li><p><strong>构建镜像</strong>（根据 Dockerfile 构建镜像）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker build -t &lt;image_name&gt;:&lt;tag&gt; &lt;path_to_dockerfile&gt;<br></code></pre></td></tr></table></figure></li></ul><h2 id="4-Docker-网络管理"><a href="#4-Docker-网络管理" class="headerlink" title="4. Docker 网络管理"></a>4. Docker 网络管理</h2><ul><li><p><strong>查看 Docker 网络</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker network <span class="hljs-built_in">ls</span><br></code></pre></td></tr></table></figure></li><li><p><strong>查看特定网络详情</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker network inspect &lt;network_name_or_id&gt;<br></code></pre></td></tr></table></figure></li><li><p><strong>创建自定义网络</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker network create &lt;network_name&gt;<br></code></pre></td></tr></table></figure></li><li><p><strong>连接容器到网络</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker network connect &lt;network_name&gt; &lt;container_id_or_name&gt;<br></code></pre></td></tr></table></figure></li><li><p><strong>从网络断开容器</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker network disconnect &lt;network_name&gt; &lt;container_id_or_name&gt;<br></code></pre></td></tr></table></figure></li></ul><h2 id="5-Docker-容器日志"><a href="#5-Docker-容器日志" class="headerlink" title="5. Docker 容器日志"></a>5. Docker 容器日志</h2><ul><li><p><strong>查看容器日志</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker logs &lt;container_id_or_name&gt;<br></code></pre></td></tr></table></figure></li><li><p><strong>实时查看容器日志</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker logs -f &lt;container_id_or_name&gt;<br></code></pre></td></tr></table></figure></li></ul><h2 id="6-Docker-Volume-管理"><a href="#6-Docker-Volume-管理" class="headerlink" title="6. Docker Volume 管理"></a>6. Docker Volume 管理</h2><h3 id="Volume-操作"><a href="#Volume-操作" class="headerlink" title="Volume 操作"></a>Volume 操作</h3><ul><li><p><strong>查看本地卷</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker volume <span class="hljs-built_in">ls</span><br></code></pre></td></tr></table></figure></li><li><p><strong>创建卷</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker volume create &lt;volume_name&gt;<br></code></pre></td></tr></table></figure></li><li><p><strong>删除卷</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker volume <span class="hljs-built_in">rm</span> &lt;volume_name&gt;<br></code></pre></td></tr></table></figure></li></ul><h2 id="7-Docker-Compose"><a href="#7-Docker-Compose" class="headerlink" title="7. Docker Compose"></a>7. Docker Compose</h2><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><ul><li><p><strong>启动服务</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker-compose up<br></code></pre></td></tr></table></figure></li><li><p><strong>后台启动服务</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker-compose up -d<br></code></pre></td></tr></table></figure></li><li><p><strong>停止服务</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker-compose down<br></code></pre></td></tr></table></figure></li><li><p><strong>查看服务日志</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker-compose logs<br></code></pre></td></tr></table></figure></li></ul><h2 id="8-Docker-清理"><a href="#8-Docker-清理" class="headerlink" title="8. Docker 清理"></a>8. Docker 清理</h2><ul><li><p><strong>删除所有停止的容器</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker container prune<br></code></pre></td></tr></table></figure></li><li><p><strong>删除所有未使用的镜像</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker image prune<br></code></pre></td></tr></table></figure></li><li><p><strong>删除所有未使用的卷</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker volume prune<br></code></pre></td></tr></table></figure></li><li><p><strong>删除所有未使用的网络</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker network prune<br></code></pre></td></tr></table></figure></li><li><p><strong>清理所有未使用的资源</strong>（容器、网络、镜像、卷）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker system prune<br></code></pre></td></tr></table></figure></li></ul><h2 id="9-其他常用命令"><a href="#9-其他常用命令" class="headerlink" title="9. 其他常用命令"></a>9. 其他常用命令</h2><ul><li><p><strong>查看 Docker 版本</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker --version<br></code></pre></td></tr></table></figure></li><li><p><strong>查看 Docker 信息</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker info<br></code></pre></td></tr></table></figure></li></ul><h2 id="10-参考文档"><a href="#10-参考文档" class="headerlink" title="10. 参考文档"></a>10. 参考文档</h2><ul><li><a href="https://docs.docker.com/">Docker 官方文档</a></li><li><a href="https://docs.docker.com/compose/">Docker Compose 官方文档</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker容器技术详解</title>
    <link href="/2025/02/19/Docker%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF%E8%AF%A6%E8%A7%A3/"/>
    <url>/2025/02/19/Docker%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="Docker容器技术详解"><a href="#Docker容器技术详解" class="headerlink" title="Docker容器技术详解"></a>Docker容器技术详解</h1><p>Docker是基于Go语言开发的开源应用容器引擎，遵从Apache Licence 2.0协议，可以让开发者打包应用以及应用的依赖包到一个可移植的容器中，然后发布到各种发行版本的Linux系统上。</p><h3 id="Docker简介"><a href="#Docker简介" class="headerlink" title="Docker简介"></a>Docker简介</h3><p>软件开发中最为麻烦的事情可能就是配置环境了。由于用户使用的操作系统具有多样性，即便使用跨平台的开发语言（如Java和Python）都不能保证代码能够在各种平台下都可以正常的运转，而且在不同的环境下我们安装的软件需要依赖的软件包也是不一样的。</p><p>那么问题来了，我们安装软件的时候可不可以把软件运行的环境一并安装？我们是不是可以把原始环境一模一样地复制过来呢？</p><p>虚拟机（virtual machine）就是带环境安装的一种解决方案，它可以在一种操作系统里面运行另一种操作系统，比如在Windows系统里面运行Linux系统，在macOS上运行Windows，而应用程序对此毫无感知。使用过虚拟机的人都知道，虚拟机用起来跟真实系统一模一样，而对于虚拟机的宿主系统来说，虚拟机就是一个普通文件，不需要了就删掉，对宿主系统或者其他的程序并没有影响。但是虚拟机通常会占用较多的系统资源，启动和关闭也非常的缓慢，总之用户体验并没有想象中的那么好。</p><p>Docker属于对Linux容器技术（LXC）的一种封装（利用了Linux的namespace和cgroup技术），它提供了简单易用的容器使用接口，是目前最流行的 Linux 容器解决方案。Docker将应用程序与该程序的依赖打包在一个文件里面，运行这个文件，就会生成一个虚拟容器。程序在这个虚拟容器里运行，就好像在真实的物理机上运行一样。下图是虚拟机和容器的对比，左边是传统的虚拟机，右边是Docker。</p><p><img src="/./res/docker_vs_vm.png"></p><p>目前，Docker主要用于几下几个方面：</p><ol><li>提供一次性的环境。</li><li>提供弹性的云服务（利用Docker很容易实现扩容和收缩）。</li><li>实践微服务架构（隔离真实环境在容器中运行多个服务）。</li></ol><h3 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h3><p>下面以CentOS为例讲解如何安装Docker，使用<a href="https://docs.docker.com/install/linux/docker-ce/ubuntu/">Ubuntu</a>、<a href="https://docs.docker.com/docker-for-mac/install/">macOS</a>或<a href="https://docs.docker.com/docker-for-windows/install/">Windows</a>的用户可以通过点击对应的链接了解这些平台下如何进行安装。</p><ol><li><p>确定操作系统内核版本（CentOS 7要求64位，内核版本3.10+；CentOS 6要求64位，内核版本2.6+）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash"><span class="hljs-built_in">uname</span> -r<br></code></pre></td></tr></table></figure></li><li><p>更新系统底层的库文件（建议一定要执行，否则在使用Docker时可能会出现莫名其妙的问题）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">yum update<br></code></pre></td></tr></table></figure></li><li><p>移除可能存在的旧的Docker版本。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Bash">yum list installed | grep docker<br>yum erase -y docker docker-common docker-engine<br></code></pre></td></tr></table></figure></li><li><p>安装yum工具包和依赖项。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">yum install -y yum-utils device-mapper-persistent-data lvm2<br></code></pre></td></tr></table></figure></li><li><p>通过yum工具包添加yum源（安装Docker-ce的源）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo<br></code></pre></td></tr></table></figure></li><li><p>在CentOS下使用yum安装Docker-ce并启动。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Bash">yum -y install docker-ce<br>systemctl start docker<br></code></pre></td></tr></table></figure></li><li><p>查看Docker的信息和版本。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Shell">docker version<br>docker info<br></code></pre></td></tr></table></figure></li></ol><p>接下来可以通过下载镜像和创建容器来看看Docker是否可以运转起来。可以使用下面的命令从Docker的镜像仓库下载名为hello-world的镜像文件。</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Shell">docker pull hello-world<br></code></pre></td></tr></table></figure><p>查看所有镜像文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Shell">docker images<br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">REPOSITORY</span>               TAG        IMAGE ID            CREATED             SIZE<br><span class="hljs-attribute">docker</span>.io/hello-world    latest     fce289e99eb9        <span class="hljs-number">7</span> months ago        <span class="hljs-number">1</span>.<span class="hljs-number">84</span> kB<br></code></pre></td></tr></table></figure><p>通过镜像文件创建并运行容器。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Shell">docker container run --name mycontainer hello-world<br></code></pre></td></tr></table></figure><blockquote><p>说明：其中<code>mycontainer</code>是我们给容器起的名字，跟在<code>--name</code>参数之后；<code>hello-world</code>就是我们刚才下载的镜像文件。</p></blockquote><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">Hello <span class="hljs-built_in">from</span> Docker!<br>This message shows that your installation appears <span class="hljs-built_in">to</span> be working correctly.<br><br>To generate this message, Docker took <span class="hljs-keyword">the</span> following steps:<br> <span class="hljs-number">1.</span> The Docker client contacted <span class="hljs-keyword">the</span> Docker daemon.<br> <span class="hljs-number">2.</span> The Docker daemon pulled <span class="hljs-keyword">the</span> <span class="hljs-string">&quot;hello-world&quot;</span> image <span class="hljs-built_in">from</span> <span class="hljs-keyword">the</span> Docker Hub.<br>    (amd64)<br> <span class="hljs-number">3.</span> The Docker daemon created <span class="hljs-keyword">a</span> <span class="hljs-built_in">new</span> container <span class="hljs-built_in">from</span> that image which runs <span class="hljs-keyword">the</span><br>    executable that produces <span class="hljs-keyword">the</span> output you are currently reading.<br> <span class="hljs-number">4.</span> The Docker daemon streamed that output <span class="hljs-built_in">to</span> <span class="hljs-keyword">the</span> Docker client, which sent <span class="hljs-keyword">it</span><br>    <span class="hljs-built_in">to</span> your terminal.<br><br>To <span class="hljs-keyword">try</span> something more ambitious, you can run <span class="hljs-keyword">an</span> Ubuntu container <span class="hljs-keyword">with</span>:<br> $ docker run -<span class="hljs-keyword">it</span> ubuntu bash<br><br>Share images, automate workflows, <span class="hljs-keyword">and</span> more <span class="hljs-keyword">with</span> <span class="hljs-keyword">a</span> free Docker ID:<br> <span class="hljs-keyword">https</span>://hub.docker.com/<br><br>For more examples <span class="hljs-keyword">and</span> ideas, visit:<br> <span class="hljs-keyword">https</span>://docs.docker.com/<span class="hljs-built_in">get</span>-started/<br></code></pre></td></tr></table></figure><p>如果要删除这个容器，可以使用下面的命令。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Shell">docker container rm mycontainer<br></code></pre></td></tr></table></figure><p>在删除容器之后，我们还可以删除刚才下载的镜像文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Shell">docker rmi hello-world<br></code></pre></td></tr></table></figure><blockquote><p>说明：如果要在Ubuntu（内核版本3.10+）下面安装和启动Docker，可以按照如下的步骤进行。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Shell">apt update<br>apt install docker-ce<br>service docker start<br></code></pre></td></tr></table></figure><p>国内用户可以通过更换Ubuntu软件下载源来提升下载速度，具体请参照清华大学开源软件镜像站上的<a href="https://mirrors.tuna.tsinghua.edu.cn/help/ubuntu/">《Ubuntu镜像使用帮助》</a>。</p></blockquote><p>安装Docker后，由于直接访问<a href="https://hub.docker.com/">dockerhub</a>下载镜像会非常缓慢，建议将服务器更换为国内镜像，可以通过修改 <code>/etc/docker/daemon.json</code> 文件来做到。一般的云服务器会有自己专属的镜像，就不需要手动修改了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">&#123;<br><span class="hljs-string">&quot;registry-mirrors&quot;</span>: [<br>        <span class="hljs-string">&quot;http://hub-mirror.c.163.com&quot;</span>,<br>        <span class="hljs-string">&quot;https://registry.docker-cn.com&quot;</span><br>    ]<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="使用Docker"><a href="#使用Docker" class="headerlink" title="使用Docker"></a>使用Docker</h3><p>想要玩转Docker，最简单的办法就是马上用Docker创建一些自己学习和工作中需要用到的容器，下面我们带着大家一起来创建这些容器。</p><h4 id="运行Nginx"><a href="#运行Nginx" class="headerlink" title="运行Nginx"></a>运行Nginx</h4><p>Nginx是高性能的Web服务器，同时也是做反向代理服务器的上佳选择。使用Docker可以非常简单的创建一个运行Nginx的容器，命令如下所示。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Shell">docker container run -d -p 80:80 --rm --name mynginx nginx<br></code></pre></td></tr></table></figure><blockquote><p>说明：上面的参数<code>-d</code>表示容器在后台运行（不产生输出到Shell）并显示容器的ID；<code>-p</code>是用来映射容器的端口到宿主机的端口，冒号前面是宿主机的端口，冒号后面是容器内部使用的端口；<code>--rm</code>表示容器停止后自动删除容器，例如执行命令<code>docker container stop mynginx</code>后，容器就不复存在了；<code>--name</code>后面的mynginx是自定义的容器名字；在创建容器的过程中，需要用到nginx的镜像文件，镜像文件的下载是自动完成的，如果没有指定版本号，默认是最新版本（latest）。</p></blockquote><p>如果需要将自己的Web项目（页面）部署到Nginx上，可以使用容器拷贝命令将指定路径下所有的文件和文件夹拷贝到容器的指定目录中。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Shell">docker container cp /root/web/index.html mynginx:/usr/share/nginx/html<br></code></pre></td></tr></table></figure><p>如果不愿意拷贝文件也可以在创建容器时通过数据卷操作<code>--volume</code>将指定的文件夹映射到容器的某个目录中，例如将Web项目的文件夹直接映射到<code>/usr/share/nginx/html</code>目录。我们先通过下面的命令让刚才创建的容器停止运行。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Shell">docker container stop mynginx<br></code></pre></td></tr></table></figure><p>然后用下面的命令重新创建容器。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Shell">docker container run -d -p 80:80 --rm --name mynginx --volume /root/docker/nginx/html:/usr/share/nginx/html nginx<br></code></pre></td></tr></table></figure><blockquote><p>说明：上面创建容器和拷贝文件的命令中，<code>container</code>是可以省略的，也就是说<code>docker container run</code>和<code>docker run</code>是一样的，而<code>docker container cp</code>和<code>docker cp</code>是一样的。此外，命令中的<code>--volume</code>也可以缩写为<code>-v</code>，就如同<code>-d</code>是<code>--detach</code>的缩写，<code>-p</code>是<code>--publish</code>的缩写。<code>$PWD</code>代表宿主系统当前文件夹，这些对于使用过Unix或者Linux系统的人来说，应该是很容易理解的。</p></blockquote><p>要查看运行中的容器，可以使用下面的命令。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Shell">docker ps<br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">CONTAINER</span> ID    IMAGE    COMMAND                  CREATED            STATUS             PORTS                 NAMES<br><span class="hljs-attribute">3c38d2476384</span>    nginx    <span class="hljs-string">&quot;nginx -g &#x27;daemon ...&quot;</span>   <span class="hljs-number">4</span> seconds ago      Up <span class="hljs-number">4</span> seconds       <span class="hljs-number">0.0.0.0:80</span>-&gt;<span class="hljs-number">80</span>/tcp    mynginx<br></code></pre></td></tr></table></figure><p>要启动和停止容器，可以使用下面的命令。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Shell">docker start mynginx<br>docker stop mynginx<br></code></pre></td></tr></table></figure><p>由于在创建容器时使用了<code>--rm</code>选项，容器在停止时会被移除，当我们使用下面的命令查看所有容器时，应该已经看不到刚才的<code>mynginx</code>容器了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Shell">docker container ls -a<br></code></pre></td></tr></table></figure><p>如果在创建容器时没有指定<code>--rm</code>选项，那么也可以使用下面的命令来删除容器。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Shell">docker rm mynginx<br></code></pre></td></tr></table></figure><p>要删除正在运行中的容器，需要使用<code>-f</code>选项。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Shell">docker rm -f mynginx<br></code></pre></td></tr></table></figure><h4 id="运行MySQL"><a href="#运行MySQL" class="headerlink" title="运行MySQL"></a>运行MySQL</h4><p>我们再来尝试用Docker安装一台MySQL服务器，首先可以先检查一下有没有MySQL的镜像文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Shell">docker search mysql<br></code></pre></td></tr></table></figure><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs delphi"><span class="hljs-keyword">INDEX</span>        <span class="hljs-keyword">NAME</span>            DESCRIPTION        STARS        OFFICIAL        AUTOMATED<br>docker.io    docker.io/mysql MySQL <span class="hljs-keyword">is</span> a ...     <span class="hljs-number">8486</span>         [OK]<br>...<br></code></pre></td></tr></table></figure><blockquote><p>说明：上面查询结果的列依次代表索引、镜像名、镜像描述、用户评价、是否官方镜像、自动构建。</p></blockquote><p>下载MySQL镜像并指定镜像的版本号。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Shell">docker pull mysql:5.7<br></code></pre></td></tr></table></figure><p>如果需要查看已经下载的镜像文件，可以使用下面的命令。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Shell">docker images<br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">REPOSITORY</span>          TAG                 IMAGE ID            CREATED             SIZE<br><span class="hljs-attribute">docker</span>.io/nginx     latest              e445ab08b2be        <span class="hljs-number">2</span> weeks ago         <span class="hljs-number">126</span> MB<br><span class="hljs-attribute">docker</span>.io/mysql     <span class="hljs-number">5</span>.<span class="hljs-number">7</span>                 f6509bac4980        <span class="hljs-number">3</span> weeks ago         <span class="hljs-number">373</span> MB<br></code></pre></td></tr></table></figure><p>创建并运行MySQL容器。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Shell">docker run -d -p 3306:3306 --name mysql57 -v /root/docker/mysql/conf:/etc/mysql/mysql.conf.d -v /root/docker/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 mysql:5.7<br></code></pre></td></tr></table></figure><blockquote><p><strong>注意</strong>：上面创建容器时我们又一次使用了数据卷操作，那是因为通常容器是随时创建随时删除的，而数据库中的数据却是需要保留下来的。</p></blockquote><p>上面的两个数据卷操作一个是映射了MySQL配置文件所在的文件夹，一个是映射了MySQL数据所在的文件夹，这两个数据卷操作非常重要。我们可以将MySQL的配置文件放在<code>$PWD/mysql/conf</code>目录下，配置文件的具体内容如下所示：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs INI"><span class="hljs-section">[mysqld]</span><br><span class="hljs-attr">pid-file</span>=/var/run/mysqld/mysqld.pid<br><span class="hljs-attr">socket</span>=/var/run/mysqld/mysqld.sock<br><span class="hljs-attr">datadir</span>=/var/lib/mysql<br><span class="hljs-attr">log-error</span>=/var/log/mysql/error.log<br><span class="hljs-attr">server-id</span>=<span class="hljs-number">1</span><br><span class="hljs-attr">log-bin</span>=/var/log/mysql/mysql-bin.log<br><span class="hljs-attr">expire_logs_days</span>=<span class="hljs-number">30</span><br><span class="hljs-attr">max_binlog_size</span>=<span class="hljs-number">256</span>M<br><span class="hljs-attr">symbolic-links</span>=<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>如果安装了MySQL 8.x版本（目前的最新版本），在使用客户端工具连接服务器时可能会遇到<code>error 2059: Authentication plugin &#39;caching_sha2_password&#39; cannot be loaded</code>的问题，这是因为MySQL 8.x默认使用了名为“caching_sha2_password”的机制对用户口令进行了更好的保护，但是如果客户端工具不支持新的认证方式，连接就会失败。解决这个问题有两种方式：一是升级客户端工具来支持MySQL 8.x的认证方式；二是进入容器，修改MySQL的用户口令认证方式。下面是具体的步骤，我们先用<code>docker exec</code>命令进入容器的交互式环境，假设运行MySQL 8.x的容器名字叫<code>mysql8x</code>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Shell">docker exec -it mysql8x /bin/bash<br></code></pre></td></tr></table></figure><p>进入容器的交互式Shell之后，可以首先利用MySQL的客户端工具连接MySQL服务器。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Shell">mysql -u root -p<br>Enter password:<br>Your MySQL connection id is 16<br>Server version: 8.0.12 MySQL Community Server - GPL<br>Copyright (c) 2000, 2018, Oracle and/or its affiliates. All rights reserved.<br>Oracle is a registered trademark of Oracle Corporation and/or its<br>affiliates. Other names may be trademarks of their respective<br>owners.<br>Type &#x27;help;&#x27; or &#x27;\h&#x27; for help. Type &#x27;\c&#x27; to clear the current input statement.<br><span class="hljs-meta prompt_">mysql&gt;</span><br></code></pre></td></tr></table></figure><p>接下来通过SQL来修改用户口令就可以了。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">user</span> <span class="hljs-string">&#x27;root&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span> identified <span class="hljs-keyword">with</span> mysql_native_password <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27;123456&#x27;</span> password expire never;<br></code></pre></td></tr></table></figure><p>当然，如果愿意你也可以查看一下用户表检查是否修改成功。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs SQL">use mysql;<br><span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span>, host, plugin, authentication_string <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> <span class="hljs-keyword">user</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;root&#x27;</span>;<br><span class="hljs-operator">+</span><span class="hljs-comment">------+-----------+-----------------------+-------------------------------------------+</span><br><span class="hljs-operator">|</span> <span class="hljs-keyword">user</span> <span class="hljs-operator">|</span> host      <span class="hljs-operator">|</span> plugin                <span class="hljs-operator">|</span> authentication_string                     <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">------+-----------+-----------------------+-------------------------------------------+</span><br><span class="hljs-operator">|</span> root <span class="hljs-operator">|</span> <span class="hljs-operator">%</span>         <span class="hljs-operator">|</span> mysql_native_password <span class="hljs-operator">|</span> <span class="hljs-operator">*</span><span class="hljs-number">6</span>BB4837EB74329105EE4568DDA7DC67ED2CA2AD9 <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> root <span class="hljs-operator">|</span> localhost <span class="hljs-operator">|</span> mysql_native_password <span class="hljs-operator">|</span> <span class="hljs-operator">*</span><span class="hljs-number">6</span>BB4837EB74329105EE4568DDA7DC67ED2CA2AD9 <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">------+-----------+-----------------------+-------------------------------------------+</span><br><span class="hljs-number">2</span> <span class="hljs-keyword">rows</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br></code></pre></td></tr></table></figure><p>在完成上面的步骤后，现在即便不更新客户端工具也可以连接MySQL 8.x了。</p><h4 id="运行Redis"><a href="#运行Redis" class="headerlink" title="运行Redis"></a>运行Redis</h4><p>接下来我们试一试运行多个容器并让多个容器之间通过网络通信。我们创建4个Redis容器来实现一主三从的主从复制结构。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Shell">docker run -d -p 6379:6379 --name redis-master redis<br>docker run -d -p 6380:6379 --name redis-slave-1 --link redis-master:redis-master redis redis-server --replicaof redis-master 6379<br>docker run -d -p 6381:6379 --name redis-slave-2 --link redis-master:redis-master redis redis-server --replicaof redis-master 6379<br>docker run -d -p 6382:6379 --name redis-slave-3 --link redis-master:redis-master redis redis-server --replicaof redis-master 6379<br></code></pre></td></tr></table></figure><p>上面的命令中，<code>--link</code>参数用于给容器创建网络别名，因为三台从机（slave）需要通过网络连接自己的主机（master）。虽然，我们可以通过<code>docker inspect --format &#39;&#123;&#123; .NetworkSettings.IPAddress &#125;&#125;&#39; &lt;container-ID&gt;</code>命令来查看到容器的IP地址，但是由于容器的即装即用性，容器的IP地址有可能会发生变化，如果直接使用IP地址，在容器重启后就可能会因为IP地址的变化导致从机无法连接到主机。使用<code>--link</code>参数创建网络别名就是为了在启动Redis服务器时在<code>redis-server</code>后面的<code>--replicaof</code>参数后使用这个别名而不是IP地址。</p><p>接下来我们进入名为<code>redis-master</code>的容器，看看主从复制的配置是否成功。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Shell">docker exec -it redis-master /bin/bash<br></code></pre></td></tr></table></figure><p>通过<code>redis-cli</code>启动命令行工具。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs Shell">redis-cli<br>127.0.0.1:6379&gt; info replication<br><span class="hljs-meta prompt_"># </span><span class="language-bash">Replication</span><br>role:master<br>connected_slaves:3<br>slave0:ip=172.17.0.4,port=6379,state=online,offset=1988,lag=0<br>slave1:ip=172.17.0.5,port=6379,state=online,offset=1988,lag=1<br>slave2:ip=172.17.0.6,port=6379,state=online,offset=1988,lag=1<br>master_replid:94703cfa03c3ddc7decc74ca5b8dd13cb8b113ea<br>master_replid2:0000000000000000000000000000000000000000<br>master_repl_offset:1988<br>second_repl_offset:-1<br>repl_backlog_active:1<br>repl_backlog_size:1048576<br>repl_backlog_first_byte_offset:1<br>repl_backlog_histlen:1988<br></code></pre></td></tr></table></figure><h4 id="运行GitLab"><a href="#运行GitLab" class="headerlink" title="运行GitLab"></a>运行GitLab</h4><p>GitLab是由GitLab Inc.开发的Git仓库管理工具，具有wiki、问题跟踪、持续集成等一系列的功能，分为社区版和企业版。通过Docker提供的虚拟化容器，我们可以安装社区版的Docker。因为GitLab需要使用SSH协议进行安全连接，我们要暴露容器的22端口，所以可以先将宿主机SSH连接的22端口修改为其他端口（如：12345），然后再进行后续的操作。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Shell">vim /etc/ssh/sshd_config<br></code></pre></td></tr></table></figure><p>将其中定义端口的那行代码去掉注释并将端口修改为12345。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Port</span> <span class="hljs-number">12345</span><br></code></pre></td></tr></table></figure><p>重新启动<code>sshd</code>服务。 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Shell">systemctl restart sshd<br></code></pre></td></tr></table></figure><blockquote><p><strong>提示</strong>：修改端口后应该确保防火墙上也开启对应的端口，否则无法使用SSH连接到Linux服务器。</p></blockquote><p>创建需要用于数据卷映射操作的文件夹。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Shell">mkdir -p /root/gitlab/&#123;config,logs,data&#125;<br></code></pre></td></tr></table></figure><p>基于<code>gitlab/gitlab-ce</code>镜像创建容器，并暴露80端口（HTTP连接）和22端口（SSH连接）。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Shell">docker run -d -p 80:80 -p 22:22 --name gitlab -v /root/gitlab/config:/etc/gitlab -v /root/gitlab/logs:/var/log/gitlab -v /root/gitlab/data:/var/opt/gitlab gitlab/gitlab-ce<br></code></pre></td></tr></table></figure><blockquote><p>说明：GitLab的启动比较缓慢，创建好容器后可能需要等待一段时间才能通过浏览器来进行访问。</p></blockquote><p>首次进入GitLab访问界面会提示我们修改管理员密码，设置好管理员密码后就可以在登录界面输入用户名<code>root</code>和刚才设置的密码登录到管理员控制台，在使用上还是非常简单和人性化的。</p><h3 id="构建镜像"><a href="#构建镜像" class="headerlink" title="构建镜像"></a>构建镜像</h3><p>通过上面的讲解，我们已经掌握了如何通过官方提供的镜像来创建容器。当然如果愿意，我们也可以用配置好的容器来生成镜像。简而言之，<strong>Docker镜像是由文件系统叠加而成的，系统的最底层是bootfs，相当于就是Linux内核的引导文件系统；接下来第二层是rootfs，这一层可以是一种或多种操作系统（如Debian或Ubuntu文件系统），Docker中的rootfs是只读状态的；Docker利用联合挂载技术将各层文件系统叠加到一起，最终的文件系统会包含有底层的文件和目录，这样的文件系统就是一个镜像</strong>。</p><p>之前我们讲过了如何查找、列出镜像和拉取（下载）镜像，接下来看看构建镜像的两种方式：</p><ol><li>使用<code>docker commit</code>命令。（不推荐）</li><li>使用<code>docker build</code>命令和Dockerfile文件。</li></ol><h4 id="使用commit命令构建镜像"><a href="#使用commit命令构建镜像" class="headerlink" title="使用commit命令构建镜像"></a>使用commit命令构建镜像</h4><p>为了演示如何构建镜像，我们先使用Ubuntu镜像来定制一个容器，命令如下所示。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Shell">docker run --name myubuntu -it ubuntu /bin/bash<br></code></pre></td></tr></table></figure><p>在容器中执行下面的命令来安装Apache服务器并退出容器。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Shell">apt -y upgrade<br>apt -y install apache2<br>exit<br></code></pre></td></tr></table></figure><p>我们将这个容器作为一个定制的Web服务器保存起来，当需要这样一台Web服务器的时候，就没有必要重新创建容器并安装Apache了。</p><p>首先我们通过下面的命令查看容器的ID。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Shell">docker container ls -a<br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">docker <span class="hljs-attribute">container</span> ls -<span class="hljs-selector-tag">a</span><br><span class="hljs-attribute">CONTAINER</span> ID    <span class="hljs-selector-tag">IMAGE</span>    COMMAND        CREATED        STATUS        PORTS    NAMES<br><span class="hljs-number">014</span>bdb321612    ubuntu   &quot;/bin/bash&quot;    <span class="hljs-number">5</span> minutes ago  Exited (<span class="hljs-number">0</span>)             myubuntu<br></code></pre></td></tr></table></figure><p>提交定制的容器。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Shell">docker commit 014bdb321612 jackfrued/mywebserver<br></code></pre></td></tr></table></figure><p>查看镜像文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Shell">docker images<br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">REPOSITORY</span>              TAG       IMAGE ID        CREATED             SIZE<br><span class="hljs-attribute">jackfrued</span>/mywebserver   latest    <span class="hljs-number">795</span>b294d265a    <span class="hljs-number">14</span> seconds ago      <span class="hljs-number">189</span> MB<br></code></pre></td></tr></table></figure><p>生成镜像文件以后，后面就可以利用刚才创建的镜像文件来创建新的容器。</p><h4 id="使用Dockerfile构建镜像"><a href="#使用Dockerfile构建镜像" class="headerlink" title="使用Dockerfile构建镜像"></a>使用Dockerfile构建镜像</h4><p>Dockerfile使用DSL（Domain Specific Language）来构建一个Docker镜像，只要编辑好了Dockerfile文件，就可以使用<code>docker build</code>命令来构建一个新的镜像。</p><p>我们先创建一个名为myapp的文件夹来保存项目代码和Dockerfile的文件，如下所示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Shell">[ECS-root temp]# tree myapp<br>myapp<br>├── api<br>│   ├── app.py<br>│   ├── requirements.txt<br>│   └── start.sh<br>└── Dockerfile<br></code></pre></td></tr></table></figure><p>其中api是Flask项目的文件夹，其中包括了项目代码、依赖项以及启动脚本等文件，具体内容如下所示：</p><p><code>app.py</code>文件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask<br><span class="hljs-keyword">from</span> flask_restful <span class="hljs-keyword">import</span> Resource, Api<br><span class="hljs-keyword">from</span> flask_cors <span class="hljs-keyword">import</span> CORS<br><br>app = Flask(__name__)<br>CORS(app, resources=&#123;<span class="hljs-string">r&#x27;/api/*&#x27;</span>: &#123;<span class="hljs-string">&#x27;origins&#x27;</span>: <span class="hljs-string">&#x27;*&#x27;</span>&#125;&#125;)<br>api = Api(app)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Product</span>(<span class="hljs-title class_ inherited__">Resource</span>):<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get</span>(<span class="hljs-params">self</span>):<br>        products = [<span class="hljs-string">&#x27;Ice Cream&#x27;</span>, <span class="hljs-string">&#x27;Chocolate&#x27;</span>, <span class="hljs-string">&#x27;Coca Cola&#x27;</span>, <span class="hljs-string">&#x27;Hamburger&#x27;</span>]<br>        <span class="hljs-keyword">return</span> &#123;<span class="hljs-string">&#x27;products&#x27;</span>: products&#125;<br><br><br>api.add_resource(Product, <span class="hljs-string">&#x27;/api/products&#x27;</span>)<br></code></pre></td></tr></table></figure><p><code>requirements.txt</code>文件：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs INI">flask<br>flask-restful<br>flask-cors<br>gunicorn<br></code></pre></td></tr></table></figure><p><code>start.sh</code>文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br>exec gunicorn -w 4 -b 0.0.0.0:8000 app:app<br></code></pre></td></tr></table></figure><blockquote><p><strong>提示</strong>：需要给start.sh文件以执行权限，可以使用<code>chmod 755 start.sh</code>命令来做到。</p></blockquote><p>Dockerfile文件：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Dockerfile"><span class="hljs-comment"># 指定基础镜像</span><br><span class="hljs-keyword">FROM</span> python:<span class="hljs-number">3.7</span><br><span class="hljs-comment"># 指定镜像的维护者</span><br><span class="hljs-keyword">MAINTAINER</span> jackfrued <span class="hljs-string">&quot;jackfrued@126.com&quot;</span><br><span class="hljs-comment"># 将指定文件添加到容器中指定的位置</span><br><span class="hljs-keyword">ADD</span><span class="language-bash"> api/* /root/api/</span><br><span class="hljs-comment"># 设置工作目录</span><br><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> /root/api</span><br><span class="hljs-comment"># 执行命令(安装Flask项目的依赖项)</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> pip install -r requirements.txt -i https://pypi.doubanio.com/simple/</span><br><span class="hljs-comment"># 容器启动时要执行的命令</span><br><span class="hljs-keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="hljs-string">&quot;./start.sh&quot;</span>]</span><br><span class="hljs-comment"># 暴露端口</span><br><span class="hljs-keyword">EXPOSE</span> <span class="hljs-number">8000</span><br></code></pre></td></tr></table></figure><p>我们来解释一下上面的Dockerfile文件。Dockerfile文件通过特殊的指令来指定基础镜像（FROM指令）、创建容器后需要指定的命令（RUN指令）以及需要暴露的端口（EXPOSE）等信息。我们稍后会专门为大家介绍这些Dockfile中的指令。</p><p>接下来我们可以使用<code>docker build</code>命令来创建镜像，如下所示。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Shell">docker build -t &quot;jackfrued/myapp&quot; .<br></code></pre></td></tr></table></figure><blockquote><p>提示：上面的命令最后面的<code>.</code> 千万不要漏掉了哦，它表示从当前路径下寻找Dockerfile。</p></blockquote><p>通过下面的命令可以查看创建好的镜像。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Shell">docker images<br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">REPOSITORY</span>                   TAG                 IMAGE ID            CREATED             SIZE<br><span class="hljs-attribute">jackfrued</span>/myapp              latest              <span class="hljs-number">6</span>d6f026a7896        <span class="hljs-number">5</span> seconds ago       <span class="hljs-number">930</span> MB<br></code></pre></td></tr></table></figure><p>如果想知道镜像文件是如何创建出来的，可以使用下面的命令。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Shell">docker history jackfrued/myapp<br></code></pre></td></tr></table></figure><figure class="highlight leaf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs leaf">IMAGE               CREATED             CREATED BY                                      SIZE                COMMENT<br>6d6f026a7896        31 seconds ago      /bin/sh -c <span class="hljs-punctuation">#</span><span class="hljs-params">(<span class="hljs-variable">nop</span>)</span>  EXPOSE 8000/tcp              0 B                 <br>3f7739173a79        31 seconds ago      /bin/sh -c <span class="hljs-punctuation">#</span><span class="hljs-params">(<span class="hljs-variable">nop</span>)</span>  ENTRYPOINT [&quot;./start.sh&quot;]    0 B                 <br>321e6bf09bf1        32 seconds ago      /bin/sh -c pip install -r requirements.txt...   13 MB               <br>2f9bf2c89ac7        37 seconds ago      /bin/sh -c <span class="hljs-punctuation">#</span><span class="hljs-params">(<span class="hljs-variable">nop</span>)</span> WORKDIR /root/api             0 B                 <br>86119afbe1f8        37 seconds ago      /bin/sh -c <span class="hljs-punctuation">#</span><span class="hljs-params">(<span class="hljs-variable">nop</span>)</span> ADD multi:4b76f9c9dfaee8...   870 B               <br>08d465e90d4d        3 hours ago         /bin/sh -c <span class="hljs-punctuation">#</span><span class="hljs-params">(<span class="hljs-variable">nop</span>)</span>  MAINTAINER jackfrued &quot;j...   0 B                 <br>fbf9f709ca9f        12 days ago         /bin/sh -c <span class="hljs-punctuation">#</span><span class="hljs-params">(<span class="hljs-variable">nop</span>)</span>  CMD [&quot;python3&quot;]              0 B <br></code></pre></td></tr></table></figure><p>使用该镜像来创建容器运行Web服务器。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Shell">docker run -d -p 8000:8000 --name myapp jackfrued/myapp<br></code></pre></td></tr></table></figure><p>如果希望将上面创建的镜像文件放到dockerhub仓库中，可以按照如下所示的步骤进行操作。</p><p>通过下面的命令登录到dockerhub。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Shell">docker login<br></code></pre></td></tr></table></figure><p>输入用户名和口令进行登录。</p><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs vbnet">Login <span class="hljs-keyword">with</span> your Docker ID <span class="hljs-keyword">to</span> push <span class="hljs-built_in">and</span> pull images <span class="hljs-keyword">from</span> Docker Hub. <span class="hljs-keyword">If</span> you don<span class="hljs-comment">&#x27;t have a Docker ID, head over to https://hub.docker.com to create one.</span><br><span class="hljs-symbol">Username:</span> jackfrued<br><span class="hljs-symbol">Password:</span> <br>Login Succeeded<br></code></pre></td></tr></table></figure><p>通过下面的命令将镜像推到仓库中。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Shell">docker push jackfrued/webserver<br></code></pre></td></tr></table></figure><p><img src="/./res/dockerhub-repo.png"></p><h4 id="Dockerfile指令"><a href="#Dockerfile指令" class="headerlink" title="Dockerfile指令"></a>Dockerfile指令</h4><p>想了解Dockerfile的指令可以查看官方提供的<a href="https://docs.docker.com/engine/reference/builder/">参考手册</a>，下面我们为大家介绍一些常用的指令。</p><ol><li><p><strong>FROM</strong>：设置基础镜像，必须是Dockerfile中的第一条指令。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Dockerfile"><span class="hljs-keyword">FROM</span> &lt;镜像名&gt; [AS &lt;别名&gt;]<br></code></pre></td></tr></table></figure><p>或</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Dockerfile"><span class="hljs-keyword">FROM</span> &lt;镜像名&gt;[:&lt;标签&gt;] [AS &lt;别名&gt;]<br></code></pre></td></tr></table></figure></li><li><p><strong>RUN</strong>：指定构建镜像时要执行的命令。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Dockerfile"><span class="hljs-keyword">RUN</span><span class="language-bash"> &lt;命令&gt; [参数1], [参数2], ... </span><br></code></pre></td></tr></table></figure><p>或</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Dockerfile"><span class="hljs-keyword">RUN</span><span class="language-bash"> [<span class="hljs-string">&quot;可执行文件&quot;</span>, <span class="hljs-string">&quot;参数1&quot;</span>, <span class="hljs-string">&quot;参数2&quot;</span>, ...]</span><br></code></pre></td></tr></table></figure></li><li><p><strong>CMD</strong>：指定构建镜像后要执行的命令。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Dockerfile"><span class="hljs-keyword">CMD</span><span class="language-bash"> &lt;命令&gt; [参数1], [参数2], ...</span><br></code></pre></td></tr></table></figure><p>或</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Dockerfile"><span class="hljs-keyword">CMD</span><span class="language-bash"> [<span class="hljs-string">&quot;可执行文件&quot;</span>, <span class="hljs-string">&quot;参数1&quot;</span>, <span class="hljs-string">&quot;参数2&quot;</span>, ...]</span><br></code></pre></td></tr></table></figure><blockquote><p>说明：Docker不同于虚拟机，容器本身就是一个进程，容器中的应用应该位于前台运行。CMD命令相当于就是用来指定容器主进程（创建容器后要在前台执行的程序）的，如果主进程结束了，容器也就停止运行了。所以在容器中启动Nginx不能使用<code>service nginx start</code>或是<code>systemctl start nginx</code>而是要通过<code>CMD [&quot;nginx&quot;, &quot;-g&quot;, &quot;daemon off;&quot;]</code>让它在前台运行。</p></blockquote></li><li><p><strong>ENTRYPOINT</strong>：和CMD类似，也可以执行命令，但<code>docker run</code>命令行中指定的任何参数都会被当做参数再次传给ENTRYPOINT指令中的命令，这就使得我们可以构建一个镜像，它既可以运行一个默认的命令，也支持通过<code>docker run</code>命令行为该命令指定可覆盖的参数选项。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Dockerfile"><span class="hljs-keyword">ENTRYPOINT</span><span class="language-bash"> &lt;命令&gt; [参数1], [参数2], ...</span><br></code></pre></td></tr></table></figure><p>或</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Dockerfile"><span class="hljs-keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="hljs-string">&quot;可执行文件&quot;</span>, <span class="hljs-string">&quot;参数1&quot;</span>, <span class="hljs-string">&quot;参数2&quot;</span>, ...]</span><br></code></pre></td></tr></table></figure></li><li><p><strong>WORKDIR</strong>：在通过镜像创建新容器时，在容器内部创建一个工作目录，ENTRYPOINT和CMD指定的程序会在这个目录下执行。在使用<code>docker run</code>命令时可以通过<code>-w</code>参数来覆盖由WORKDIR指定的工作目录。例如：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Dockerfile"><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> /opt/webapp</span><br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Shell">docker run -w /usr/share/webapp ...<br></code></pre></td></tr></table></figure></li><li><p><strong>ENV</strong>：在创建镜像时设置环境变量。在使用<code>docker run</code>命令时，可以通过<code>-e</code>参数来修改环境变量的设置。例如：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Dockerfile"><span class="hljs-keyword">ENV</span> DEFAULT_PORT=<span class="hljs-number">8080</span><br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Shell">docker run -e &quot;DEFAULT_PORT=8000&quot; ...<br></code></pre></td></tr></table></figure></li><li><p><strong>USER</strong>：指定镜像会以什么用户身份去运行。例如：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Dockerfile"><span class="hljs-keyword">USER</span> nginx<br></code></pre></td></tr></table></figure></li><li><p><strong>VOLUME</strong>：在创建容器时添加一个数据卷的挂载点。通过数据卷操作可以实现容器间数据的共享和重用，对卷所作的修改可以马上生效而不需要重新启动容器，我们之前创建容器时使用<code>--volume</code>参数就是为了实现数据卷的映射操作。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Dockerfile"><span class="hljs-keyword">VOLUME</span><span class="language-bash"> [<span class="hljs-string">&quot;/路径1&quot;</span>, <span class="hljs-string">&quot;/路径2/子路径2.1/&quot;</span>, ...]</span><br></code></pre></td></tr></table></figure></li><li><p><strong>ADD</strong>：将构建目录下的文件和文件夹复制到镜像中，如果是压缩文件和归档文件，ADD命令会对这些文件进行解压缩解归档的操作。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Dockerfile"><span class="hljs-keyword">ADD</span><span class="language-bash"> [--<span class="hljs-built_in">chown</span>=&lt;用户&gt;:&lt;用户组&gt;] &lt;源文件&gt; &lt;目标文件&gt;</span><br></code></pre></td></tr></table></figure></li><li><p><strong>COPY</strong>：非常类似于ADD，但不会主动对文件进行提取操作。</p></li><li><p><strong>LABEL</strong>：为Docker镜像添加一些元数据，在使用<code>docker inspect</code>命令时会看到这些元数据。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Dockerfile"><span class="hljs-keyword">LABEL</span><span class="language-bash"> version=<span class="hljs-string">&quot;1.0.0&quot;</span> location=<span class="hljs-string">&quot;Chengdu&quot;</span></span><br></code></pre></td></tr></table></figure></li><li><p><strong>ONBUILD</strong>：为镜像添加触发器，当一个镜像被用作其他镜像的基础镜像，触发器将会被执行。例如：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Dockerfile"><span class="hljs-keyword">ONBUILD</span> <span class="hljs-keyword">ADD</span><span class="language-bash"> . /app/src</span><br><span class="hljs-keyword">ONBUILD</span> <span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">cd</span> /app/src &amp;&amp; make</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="多容器管理"><a href="#多容器管理" class="headerlink" title="多容器管理"></a>多容器管理</h3><p>我们的项目可能会使用了多个容器，容器多了之后管理容器的工作就会变得麻烦。如果要对多个容器进行自动配置使得容器可以相互协作甚至实现复杂的调度，这就需要进行容器编排。Docker原生对容器编排的支持非常弱，但是可以通过社区提供的工具来实现容器编排。</p><h4 id="Docker-Compose"><a href="#Docker-Compose" class="headerlink" title="Docker Compose"></a>Docker Compose</h4><p>可以通过安装Docker Compose工具来实现基于YAML文件的容器编排，YAML文件会定义一系列的容器以及容器运行时的属性，Docker Compose会根据这些配置来管理容器。</p><ol><li><p>安装Docker Compose。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Shell">curl -L &quot;https://github.com/docker/compose/releases/download/1.25.4/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-compose<br>chmod +x /usr/local/bin/docker-compose<br></code></pre></td></tr></table></figure><blockquote><p>说明：如果没有curl工具，在CentOS下可以先通过包管理工具yum安装curl再执行上面的命令。</p></blockquote><p>当然我们也可以使用Python的包管理工具pip来安装Docker Compose，命令如下所示。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Shell">pip3 install -U docker-compose<br></code></pre></td></tr></table></figure></li><li><p>使用Docker Compose。</p><p>我们在刚才的Flask项目中引入缓存，然后再利用Flask提供的数据接口为前端页面提供数据，使用Vue.js进行页面渲染并将静态页面部署在Nginx服务器上。项目文件夹结构如下所示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Shell">[ECS-root ~]# tree temp<br>temp<br>├── docker-compose.yml<br>├── html<br>│   └── index.html<br>└── myapp<br>    ├── api<br>    │   ├── app.py<br>    │   ├── requirements.txt<br>    │   └── start.sh<br>    └── Dockerfile<br></code></pre></td></tr></table></figure><p>修改后的app.py文件代码如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> pickle <span class="hljs-keyword">import</span> dumps, loads<br><br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask<br><span class="hljs-keyword">from</span> flask_restful <span class="hljs-keyword">import</span> Resource, Api<br><span class="hljs-keyword">from</span> flask_cors <span class="hljs-keyword">import</span> CORS<br><span class="hljs-keyword">from</span> redis <span class="hljs-keyword">import</span> Redis<br><br>app = Flask(__name__)<br>CORS(app, resources=&#123;<span class="hljs-string">r&#x27;/api/*&#x27;</span>: &#123;<span class="hljs-string">&#x27;origins&#x27;</span>: <span class="hljs-string">&#x27;*&#x27;</span>&#125;&#125;)<br>api = Api(app)<br>redis = Redis(host=<span class="hljs-string">&#x27;redis-master&#x27;</span>, port=<span class="hljs-number">6379</span>)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Product</span>(<span class="hljs-title class_ inherited__">Resource</span>):<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get</span>(<span class="hljs-params">self</span>):<br>        data = redis.get(<span class="hljs-string">&#x27;products&#x27;</span>)<br>        <span class="hljs-keyword">if</span> data:<br>            products = loads(data)<br>        <span class="hljs-keyword">else</span>:<br>            products = [<span class="hljs-string">&#x27;Ice Cream&#x27;</span>, <span class="hljs-string">&#x27;Chocolate&#x27;</span>, <span class="hljs-string">&#x27;Coca Cola&#x27;</span>, <span class="hljs-string">&#x27;Hamburger&#x27;</span>]<br>            redis.<span class="hljs-built_in">set</span>(<span class="hljs-string">&#x27;products&#x27;</span>, dumps(products))<br>        <span class="hljs-keyword">return</span> &#123;<span class="hljs-string">&#x27;products&#x27;</span>: products&#125;<br><br><br>api.add_resource(Product, <span class="hljs-string">&#x27;/api/products&#x27;</span>)<br></code></pre></td></tr></table></figure><p>html文件夹用来保存静态页面，稍后我们会通一个运行Nginx的容器来向浏览器提供静态页面。index.html文件的内容如下所示：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>产品列表<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;product in products&quot;</span>&gt;</span>&#123;&#123; product &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.bootcss.com/vue/2.6.10/vue.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>, </span><br><span class="language-javascript">            <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">                <span class="hljs-attr">products</span>: []</span><br><span class="language-javascript">            &#125;,</span><br><span class="language-javascript">            <span class="hljs-title function_">created</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-title function_">fetch</span>(<span class="hljs-string">&#x27;http://1.2.3.4:8000/api/products&#x27;</span>)</span><br><span class="language-javascript">                    .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">resp</span> =&gt;</span> resp.<span class="hljs-title function_">json</span>())</span><br><span class="language-javascript">                    .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">json</span> =&gt;</span> &#123;<span class="hljs-variable language_">this</span>.<span class="hljs-property">products</span> = json.<span class="hljs-property">products</span>&#125;)</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>接下来，我们要通过docker-compose.yml文件来创建三个容器并指明容器之间的依赖关系。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs YAML"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3&#x27;</span><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">api-server:</span><br>    <span class="hljs-attr">build:</span> <span class="hljs-string">./myapp</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;8000:8000&#x27;</span><br>    <span class="hljs-attr">links:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">redis-master</span><br>  <span class="hljs-attr">web-server:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">nginx</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;80:80&#x27;</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./html:/usr/share/nginx/html</span><br>  <span class="hljs-attr">redis-master:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">redis</span><br>    <span class="hljs-attr">expose:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;6379&#x27;</span><br></code></pre></td></tr></table></figure><p>有了这个YAML文件，我们就可以使用<code>docker-compose</code>命令来创建容器运行项目，其命令如下所示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs Shell">[ECS-root temp]# docker-compose up<br>Creating network &quot;temp_default&quot; with the default driver<br>Creating temp_web-server_1   ... done<br>Creating temp_redis-master_1 ... done<br>Creating temp_api-server_1   ... done<br>Attaching to temp_redis-master_1, temp_web-server_1, temp_api-server_1<br>redis-master_1  | 1:C 05 Dec 2019 11:57:26.828 # oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo<br>redis-master_1  | 1:C 05 Dec 2019 11:57:26.828 # Redis version=5.0.6, bits=64, commit=00000000, modified=0, pid=1, just started<br>redis-master_1  | 1:C 05 Dec 2019 11:57:26.828 # Warning: no config file specified, using the default config. In order to specify a config file use redis-server /path/to/redis.conf<br>redis-master_1  | 1:M 05 Dec 2019 11:57:26.830 * Running mode=standalone, port=6379.<br>redis-master_1  | 1:M 05 Dec 2019 11:57:26.831 # WARNING: The TCP backlog setting of 511 cannot be enforced because /proc/sys/net/core/somaxconn is set to the lower value of 128.<br>redis-master_1  | 1:M 05 Dec 2019 11:57:26.831 # Server initialized<br>redis-master_1  | 1:M 05 Dec 2019 11:57:26.831 # WARNING overcommit_memory is set to 0! Background save may fail under low memory condition. To fix this issue add &#x27;vm.overcommit_memory = 1&#x27; to /etc/sysctl.conf and then reboot or run the command &#x27;sysctl vm.overcommit_memory=1&#x27; for this to take effect.<br>redis-master_1  | 1:M 05 Dec 2019 11:57:26.831 # WARNING you have Transparent Huge Pages (THP) support enabled in your kernel. This will create latency and memory usage issues with Redis. To fix this issue run the command &#x27;echo never &gt; /sys/kernel/mm/transparent_hugepage/enabled&#x27; as root, and add it to your /etc/rc.local in order to retain the setting after a reboot. Redis must be restarted after THP is disabled.<br>redis-master_1  | 1:M 05 Dec 2019 11:57:26.831 * Ready to accept connections<br>api-server_1    | [2019-12-05 11:57:27 +0000] [1] [INFO] Starting gunicorn 20.0.4<br>api-server_1    | [2019-12-05 11:57:27 +0000] [1] [INFO] Listening at: http://0.0.0.0:8000 (1)<br>api-server_1    | [2019-12-05 11:57:27 +0000] [1] [INFO] Using worker: sync<br>api-server_1    | [2019-12-05 11:57:27 +0000] [8] [INFO] Booting worker with pid: 8<br>api-server_1    | [2019-12-05 11:57:27 +0000] [9] [INFO] Booting worker with pid: 9<br>api-server_1    | [2019-12-05 11:57:27 +0000] [10] [INFO] Booting worker with pid: 10<br>api-server_1    | [2019-12-05 11:57:27 +0000] [11] [INFO] Booting worker with pid: 11<br></code></pre></td></tr></table></figure><p> 要停止容器的运行，可以使用下面的命令。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Shell">docker-compose down<br></code></pre></td></tr></table></figure></li></ol><h4 id="Kubernetes（K8S）"><a href="#Kubernetes（K8S）" class="headerlink" title="Kubernetes（K8S）"></a>Kubernetes（K8S）</h4><p>实际的生产环境中常常需要部署和管理多个协同工作的容器，docker compose解决了多容器创建和管理的问题，但是实际项目中，我们还需要Kubernetes（以下都简称为K8S）来提供一个跨主机集群的容器调度平台。K8S可以进行自动化容器的部署、扩展和操作，从而提供以容器为中心的基础架构。该项目是谷歌在2014年启动的项目，建立在谷歌公司十余年运维经验的基础之上，而且谷歌自己的应用也是运行在容器上的。</p>]]></content>
    
    
    <categories>
      
      <category>docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
